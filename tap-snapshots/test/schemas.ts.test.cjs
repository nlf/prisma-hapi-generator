/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/schemas.ts TAP generates schemas > /lib/schemas.ts 1`] = `
// DO NOT EDIT THIS FILE! It is automatically generated and changes WILL be overwritten

import Joi from 'joi';

const Root = Joi.object().keys({
  Author: Joi.object().keys({
    id: Joi.number().alter({
      create: (schema) => schema.forbidden(),
      update: (schema) => schema.valid(Joi.ref('$params.authorId')).strip(),
    }),
    firstName: Joi.string().alter({
      create: (schema) => schema.required(),
    }),
    lastName: Joi.string().alter({
      create: (schema) => schema.required(),
    }),
    books: Joi.array().items(Joi.link('/Book')),
  }),
  Book: Joi.object().keys({
    id: Joi.string().alter({
      create: (schema) => schema.forbidden(),
      update: (schema) => schema.valid(Joi.ref('$params.bookId')).strip(),
    }),
    title: Joi.string().alter({
      create: (schema) => schema.required(),
    }),
    pages: Joi.number().integer()
      .max(10),
    createdAt: Joi.date().alter({
      create: (schema) => schema.strip(),
      update: (schema) => schema.strip(),
    }),
    banned: Joi.boolean().alter({
      create: (schema) => schema.required(),
    }),
    reviews: Joi.array().items(Joi.link('/Review')),
    cost: Joi.number().alter({
      create: (schema) => schema.required(),
    }),
    authorId: Joi.number().alter({
      create: (schema) => schema.required(),
    }),
    author: Joi.link('/Author'),
  }),
  Review: Joi.object().keys({
    id: Joi.string().alter({
      create: (schema) => schema.forbidden(),
      update: (schema) => schema.valid(Joi.ref('$params.reviewId')).strip(),
    }),
    stars: Joi.number().integer().alter({
      create: (schema) => schema.required(),
    }),
    bookId: Joi.string().alter({
      create: (schema) => schema.required(),
    }),
    book: Joi.link('/Book'),
  }),
});

export const Author = Root.extract('Author');
export const CreateAuthor = Author.tailor('create');
export const UpdateAuthor = Author.tailor('update');

export const Book = Root.extract('Book');
export const CreateBook = Book.tailor('create');
export const UpdateBook = Book.tailor('update');

export const Review = Root.extract('Review');
export const CreateReview = Review.tailor('create');
export const UpdateReview = Review.tailor('update');

`
