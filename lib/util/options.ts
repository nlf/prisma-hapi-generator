import { dirname, join } from 'node:path';
import type { DMMF, GeneratorOptions } from '@prisma/generator-helper';
import { type ProjectOptions, IndentationText, QuoteKind } from 'ts-morph';
import { type FormatCodeSettings, SemicolonPreference } from 'typescript';

export interface HapiGeneratorOptions {
  paths: {
    root: string;
    client: string;
    schemas: string;
    types: string;
    routes: string;
  };

  headers: {
    file: string;
  };

  formatSettings: FormatCodeSettings;
  projectSettings: ProjectOptions;

  models: DMMF.Model[];
}

export function getOptions (options: GeneratorOptions): HapiGeneratorOptions {
  const clientGenerator = options.otherGenerators.find((g) => g.provider.value === 'prisma-client-js');
  // istanbul ignore if - no need to test a thrown error
  if (!clientGenerator?.output?.value) {
    throw new Error('The prisma-client-js generator is required');
  }

  // istanbul ignore next - the else branch here is for defense in depth and should be unreachable
  const root = (options.generator.output?.value ?? dirname(options.schemaPath)) + '/';

  const result: HapiGeneratorOptions = {
    paths: {
      root,
      client: `${clientGenerator.output.value}/`,
      schemas: join(root, 'schemas.ts'),
      types: join(root, 'types.ts'),
      routes: join(root, 'routes/'),
    },

    headers: {
      file: '// DO NOT EDIT THIS FILE! It is automatically generated and changes WILL be overwritten',
    },

    formatSettings: {
      indentSize: 2,
      tabSize: 2,
      semicolons: SemicolonPreference.Insert,
    },
    projectSettings: {
      manipulationSettings: {
        quoteKind: QuoteKind.Single,
        useTrailingCommas: true,
        indentationText: IndentationText.TwoSpaces,
      },
    },

    models: options.dmmf.datamodel.models.sort((a, b) => a.name.localeCompare(b.name, 'en')),
  };

  // istanbul ignore else - this is literally always true in tests
  if (process.env.NODE_ENV === 'test') {
    result.projectSettings.useInMemoryFileSystem = true;
  }

  return result;
}

