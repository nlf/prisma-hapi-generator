import { relative } from 'node:path';

import type { DMMF } from '@prisma/generator-helper';
import { type Project, ModuleDeclarationKind, VariableDeclarationKind } from 'ts-morph';

import type { GenerateOptions } from './index';

const getIdType = (fieldType: string): string => {
  if (fieldType === 'Boolean') {
    return 'boolean';
  }

  if (fieldType === 'DateTime') {
    return 'Date';
  }

  if (fieldType === 'String') {
    return 'string';
  }

  if (fieldType === 'Int' || fieldType === 'Float' || fieldType === 'Decimal') {
    return 'number';
  }

  return 'unknown';
};

export function generateTypesFile (project: Project, models: DMMF.Model[], options: GenerateOptions) {
  const typesFile = project.createSourceFile(`${options.config.output}/types.ts`, {}, { overwrite: true });

  let clientPath = relative(options.config.output, options.config.clientPath);
  if (!clientPath.startsWith('.')) {
    clientPath = `./${clientPath}`;
  }

  typesFile.addImportDeclaration({
    moduleSpecifier: clientPath,
    isTypeOnly: true,
    namedImports: ['Prisma', 'PrismaClient'],
    leadingTrivia: (writer) => {
      return writer
        .write('// This file is automatically generated. Changes will be overwritten the next time the Prisma generator is run')
        .newLine();
    },
  });

  typesFile.addImportDeclaration({
    moduleSpecifier: '@hapi/hapi',
    isTypeOnly: true,
    namespaceImport: 'Hapi',
  });

  for (const model of models) {
    // create model payload
    typesFile.addInterface({
      name: `Create${model.name}Payload`,
      isExported: true,
      extends: ['Hapi.ReqRefDefaults'],
      leadingTrivia: (writer) => writer.blankLineIfLastNot(),
      properties: [{
        name: 'Payload',
        type: `Prisma.${model.name}CreateInput`,
      }],
    });

    // update model payload
    typesFile.addInterface({
      name: `Update${model.name}Payload`,
      isExported: true,
      extends: ['Hapi.ReqRefDefaults'],
      properties: [{
        name: 'Payload',
        type: `Prisma.${model.name}UpdateInput`,
      }],
    });

    // and the params
    const idFieldName = model.name[0].toLowerCase() + model.name.slice(1) + 'Id';
    const idField = model.fields.find((field) => field.isId);
    typesFile.addInterface({
      name: `${model.name}IdParam`,
      properties: [{
        name: idFieldName,
        type: getIdType(idField?.type ?? 'unknown'),
      }],
    });

    typesFile.addInterface({
      name: `${model.name}Params`,
      isExported: true,
      extends: ['Hapi.ReqRefDefaults'],
      properties: [{
        name: 'Params',
        type: `${model.name}IdParam`,
      }],
    });
  }

  const hapiModule = typesFile.addModule({
    name: `'@hapi/hapi'`,
    hasDeclareKeyword: true,
    declarationKind: ModuleDeclarationKind.Module,
  });

  hapiModule.addInterface({
    name: 'ServerApplicationState',
    extends: ['Hapi.ServerApplicationState'],
    properties: [{
      name: 'prisma',
      type: 'PrismaClient',
    }],
  });

  hapiModule.addInterface({
    name: 'ResponseToolkit',
    extends: ['Hapi.ResponseToolkit'],
    properties: [{
      name: 'prisma',
      type: 'PrismaClient',
    }],
  });

  typesFile.formatText(options.formatSettings);
}
